#+TITLE: truthiness package
#+AUTHOR: Dale Barr
#+EMAIL: dalejbarr@protonmail.com

* Process raw data

#+begin_src R
  devtools::load_all()
  library("tidyverse")

  gen_data(576) %>%
    group_by(repetition, interval) %>%
    summarize(m = mean(trating))
#+end_src


* Calculate cohen's d

#+begin_src R
  devtools::load_all()
  library("tidyverse")

  mdat <- gen_data(576, raw_eff = .14)

  diffs <- mdat %>%
    mutate(trating = as.integer(trating)) %>%
    filter(interval == "1 day") %>%
    group_by(subj_id, repetition) %>%
    summarize(m = mean(trating)) %>%
    pivot_wider(names_from = repetition, values_from = m) %>%
    mutate(diff = old - new)

  vv <- diffs %>% pull(diff)
  stderr <- sd(vv) / sqrt(length(vv))
  tstat <- mean(vv) / stderr

  sd_10000 <- .5451675
  sd_576 <- .5198214

  .1 / sd(vv)

  t.test(vv)

  diffs %>%
    group_by(interval == "immediate") %>%
    summarize(m = mean(diff), sd = sd(diff), n = mean(new), o = mean(old))

#+end_src

* Type I error rate (ANOVA)

#+begin_src R
  devtools::load_all()
  library("tidyverse")
  library("lme4")

  anova_once <- function(raw_eff = .14, version = "single") {
    dat <- gen_data(576, raw_eff = raw_eff, version = version) %>%
      mutate(trating = as.integer(trating))

    res <- dat %>%
      group_by(subj_id, repetition, interval, R, I1, I2, I3) %>%
      summarize(m = mean(trating)) %>%
      ungroup()

    mod1 <- lmer(m ~ R * (I1 + I2 + I3) + (1 | subj_id),
		 res, REML=FALSE)
    mod2 <- update(mod1, . ~ . -R:I1 -R:I2 -R:I3)
    mod3 <- update(mod1, . ~ . -R)

    ff <- anova(mod2, mod1)
    gg <- anova(mod3, mod1)
    c(p.ix = ff$`Pr(>Chisq)`[2],
      p.me = gg$`Pr(>Chisq)`[2])  
  }

  ## 'single' version (effect appears at one phase only)
  ##
  ## power to detect the main effect has only about 60% of the power for
  ## the interaction
  res <- replicate(100, anova_once())
  apply(res, 1, function(x) sum(x < .05))

  ## asymptote version
  ##
  ## power to detect the main effect is 108% the power for the interaction
  res <- replicate(100, anova_once(version = "asymptote"))
  apply(res, 1, function(x) sum(x < .05))
#+end_src

* generate fake prolific files

#+begin_src R
  devtools::load_all()
  ## library("tidyverse")

  #### filler header fields to pad
  ## StartDate, EndDate, Status,
  ## Progress, RecordedDate, ResponseId, DistributionChannel,
  ## UserLanguage

  ## header fields to fill in
  ## Duration (in seconds)
  ## Consent

  #### tail fields to pad
  ## age, gender, nationality, comments,

  #### tail fields to fill in
  ## cheat

  #### extra fields we need:
  ## repeater

  make_prolific_file <- function(data, segment_id, subj_data, idata, path) {
    id <- as.integer(strsplit(segment_id, "\\.")[[1]])
    names(id) <- c("L", "P")
    pad_string <- "xxxx"
    dur_id <- paste0("dur_", id[["P"]])
    wide_data <- tidyr::pivot_wider(data,
				    names_from = "task_id",
				    values_from = "trating")
    jtib <- wide_data[, "subj_id"]
    jtib[["StartDate"]] <-
      jtib[["EndDate"]] <-
      jtib[["Status"]] <-
      jtib[["Progress"]] <-
      jtib[["RecordedDate"]] <-
      jtib[["ResponseId"]] <-
      jtib[["DistributionChannel"]] <-
      jtib[["UserLanguage"]] <-
      pad_string

    rtib <- wide_data[, "subj_id"]
    rtib[["age"]] <-
      rtib[["gender"]] <-
      rtib[["nationality"]] <-
      rtib[["comments"]] <-
      pad_string

    extra <- 
      dplyr::inner_join(
	       wide_data[, "subj_id"],
	       subj_data[, c("subj_id", dur_id, "Finished",
			     "ConsentAll", "Consent", "PID",
			     "cheat", "repeater", "nativelang")],
	       "subj_id")
    names(extra)[names(extra) == dur_id] <- "Duration (in seconds)"

    plists <- truthiness::presentation_lists
    plists2 <-
      plists[plists[["task"]] == "interest" &
	   as.integer(plists[["list_id"]]) == id[["L"]],]
    plists3 <- tidyr::crossing(jtib[, "subj_id"],
			       plists2[, c("task_id")])
    plists3[["score"]] <- sample(
      c("1 Definitely uninteresting",
	2:6,
	"7 Definitely interesting"), nrow(plists3), TRUE)
    this_idata <-
      tidyr::pivot_wider(plists3,
			 names_from = "task_id",
			 values_from = "score")
    tord <- as.character(plists2[["task_id"]])
  
    ftbl <- dplyr::inner_join(jtib, extra, "subj_id") %>%
      dplyr::inner_join(wide_data, "subj_id") %>%
      dplyr::left_join(this_idata[, c("subj_id", tord)], "subj_id") %>%
      dplyr::inner_join(rtib, "subj_id")
    ftbl[["PROLIFIC_PID"]] <- ftbl[["PID"]]

    wide_cnames <- setdiff(colnames(wide_data),
			   c("list_id", "phase_id", "subj_id"))
    inames <- setdiff(colnames(this_idata), "subj_id")

    ## repeaters
    rtodo <- which(ftbl[["repeater"]])
    for (i in rtodo) {
      ftbl[i, wide_cnames] <- factor(rep(sample(1:7, 1), length(wide_cnames)),
				     levels = 1:7, ordered = TRUE)
    }

    tt <- truthiness::prolific_headers[["head_cols"]]
    zz <- truthiness::prolific_headers[["tail_cols"]]
    if (id[["P"]] == 1L) {
      cc <- which(tt == "Consent")
      ee <- which(zz == "comments")
      cols_left <- c(tt[1:(cc - 1L)], "ConsentAll", tt[cc:length(tt)])
      cols_mid <- c(inames, wide_cnames)
      cols_right <- c(zz[1:(ee - 1L)], "nativelang", zz[ee:length(zz)])
    } else {
      dd <- which(zz == "comments")
      cols_left <- tt
      cols_mid <- wide_cnames
      cols_right <- zz[dd:length(zz)]
    }

    odata <- ftbl[, c(cols_left, cols_mid, cols_right)]
    pname <- file.path(path, sprintf("phase%d", id[["P"]]))
    if (!dir.exists(pname))
      dir.create(pname, FALSE, recursive=TRUE)
    fname <- file.path(pname, sprintf("P%dL%d.csv", id[["P"]], id[["L"]]))

    ## now create the header lines of the file
    xx <- as.matrix(prolific_headers$left_chunk)
    consentTxt <- as.character(xx[3, 11])
    r1 <- c(cols_left, seq_along(cols_mid), cols_right)
    dr1 <- do.call(data.frame,
		   c(as.list(r1), list(stringsAsFactors = FALSE))) %>%
      tibble::as_tibble()

    dr2 <- do.call(data.frame,
		  c(as.list(colnames(odata),
			    list(stringsAsFactors = FALSE))))

    st <- tibble::tibble(stim_id = factor(
			   as.integer(substr(cols_mid, 3, 5)),
			   levels = levels(
			     truthiness::stimulus_materials[["stim_id"]])))
    st2 <- dplyr::inner_join(st, truthiness::stimulus_materials, "stim_id")
    r3 <- c(cols_left,
	    paste0(seq_along(st2[["statement"]]), ".    ",
		   st2[["statement"]]),
	    cols_right)
    r3[r3 %in% c("PID", "PROLIFIC_PID")] <- "Please enter your Prolific ID:"
    dr3 <- do.call(data.frame,
		   c(as.list(r3),
		     list(stringsAsFactors = FALSE)))
    r4 <- paste0("{\"ImportId\":", "\"", colnames(odata), "\"}")
    dr4 <- do.call(data.frame,
		   c(as.list(r4),
		     list(stringsAsFactors = FALSE)))

    readr::write_csv(dr1, fname, col_names = FALSE, append = FALSE)
    readr::write_csv(dr2, fname, col_names = FALSE, append = TRUE)
    readr::write_csv(dr3, fname, col_names = FALSE, append = TRUE)
    readr::write_csv(dr4,
		     fname, col_names = FALSE, append = TRUE)
    readr::write_csv(odata, fname, col_names = FALSE, append = TRUE)

    return(fname)
  }

  #' Simulate response data files from the rating study
  #'
  #' @param data Simulated data resulting from a call to \code{\link{gen_data}}.
  #'
  #' @param path Path to subdirectory where files should be stored.
  #'
  #' @param overwrite Whether to overwrite the subdirectory.
  #'
  #' @param p_too_fast Probability that the respondent completed the
  #'   task faster than the cutoff time ('Duration (in seconds)' less
  #'   than \code{duration_range_1[1]} for Phase 1, less than
  #'   \code{duration_range_all[1]} for all other phases).
  #'
  #' @param p_too_slow Probability that the respondent completed the
  #'   task slower than the cutoff time ('Duration (in seconds)' greater
  #'   than \code{duration_range_1[2]} for Phase 1, greater than
  #'   \code{duration_range_all[2]} for all other phases).
  #'
  #' @param p_incomplete Probability that the respondent failed to complete the task ('Finished' = FALSE).
  #'
  #' @param p_cheat Probability that the respondent looked up answers
  #'   ('cheat' = "Yes...")
  #'
  #' @param p_no_consent_all Probability the respondent refused consent
  #'   to the full study.
  #'
  #' @param p_no_consent_phase Probability the respondent refused
  #'   consent to a phase of the study.
  #'
  #' @param p_nonnative Probability the respondent is not a native
  #'   English speaker.
  #' 
  #' @param p_repeater Probability that the respondent just pressed the
  #'   same key over and over for at least one phase.
  #'
  #' @param duration_range_1 Two-element vector giving the range of
  #'   acceptable task durations for Phase 1.
  #'
  #' @param duration_range_2 Two-element vector giving the range of
  #'   acceptable task durations for Phases 2, 3, and 4.
  #' 
  #' @return A character vector with the names of the data files.
  simulate_resp_files <- function(data,
				  path,
				  overwrite = FALSE,
				  p_too_fast = .01,
				  p_too_slow = .01,
				  p_incomplete = .01,
				  p_cheat = .01,
				  p_no_consent_all = .01,
				  p_no_consent_phase = .01,
				  p_nonnative = .01,
				  p_repeater = .01,
				  duration_range_1 = c(180, 2400),
				  duration_range_all = c(60, 1800)) {

    if (dir.exists(path)) {
      if (!overwrite)
	stop("subdirectory '", path, "' already exists and overwrite = FALSE")
      unlink("path", TRUE)
    }

    nsubj <- length(unique(data[["subj_id"]]))

    PIDs <- replicate(nsubj, {
      paste0(sample(c(LETTERS, letters), 24L),
	     collapse = "")
    })

    p1_qlower <- qnorm(p_too_fast)
    p1_qupper <- qnorm(p_too_slow, lower.tail = FALSE)
    sd_span <- p1_qupper - p1_qlower
    p1_sd <- (duration_range_1[2] - duration_range_1[1]) /
      sd_span
    p1_mean <- duration_range_1[1] + (-p1_qlower * p1_sd)

    all_sd <- (duration_range_all[2] - duration_range_all[1]) /
      sd_span
    all_mean <- duration_range_all[1] + (-p1_qlower * all_sd)
  
    all_mean = (duration_range_all[2] - duration_range_all[1]) / 2 +
      duration_range_all[1]
    all_sd = (duration_range_all[2] - duration_range_1[1]) /
      (2 * qnorm(.99))

    dur_p1 <- as.integer(rnorm(nsubj, p1_mean, p1_sd))
    dur_p1 <- dplyr::if_else(dur_p1 < 0, 0L, dur_p1)

    dur_all <- replicate(3, {
      .ff <- as.integer(rnorm(nsubj, all_mean, all_sd))
      dplyr::if_else(.ff < 0, 0L, .ff)
    })

    ## generate participant info
    pids <- tibble::tibble(
		      subj_id = factor(seq_len(nsubj)),
		      PID = PIDs,
		      dur_1 = dur_p1,
		      dur_2 = dur_all[, 1],
		      dur_3 = dur_all[, 2],
		      dur_4 = dur_all[, 3],
		      Finished = sample(c(TRUE, FALSE),
					nsubj, TRUE,
					c(1 - p_incomplete,
					  p_incomplete)),
		      cheat = sample(c(
			"No, I didn't look any answers up",
			"Yes, I looked up answer(s)"),
			nsubj, TRUE, c(1 - p_cheat, p_cheat)),
		      ConsentAll = sample(c(
			"Yes, I confirm",
			"No, I don't"), nsubj, TRUE,
			c(1 - p_no_consent_all, p_no_consent_all)),
		      Consent = sample(c(
			"Yes, I confirm",
			"No, I don't"), nsubj, TRUE,
			c(1 - p_no_consent_phase,
			  p_no_consent_phase)),
		      repeater = sample(c(TRUE, FALSE),
					nsubj, TRUE,
					c(p_repeater, 1 - p_repeater)),
		      nativelang = sample(c("English", "something else"),
					  nsubj, TRUE,
					  c(1 - p_nonnative, p_nonnative)))

    tpres <-
      presentation_lists[presentation_lists[["task"]] == "truth",
			 c("phase_id", "list_id", "stim_id",
			   "task_id", "order")]

    dat <- gen_data(nsubj) %>%
      dplyr::inner_join(pids, "subj_id")
    dat[["trating"]] <- as.character(dat[["trating"]])
    dat[["trating"]] <-
      dplyr::if_else(dat[["trating"]] == "1",
		     "1 Definitely false", dat[["trating"]])
    dat[["trating"]] <-
      dplyr::if_else(dat[["trating"]] == "7",
		     "7 Definitely true", dat[["trating"]])

    df1 <- dplyr::inner_join(dat, tpres,
			     c("list_id", "stim_id")) %>%
      dplyr::arrange(list_id, subj_id, phase_id, order) %>%
      dplyr::select(list_id, subj_id, phase_id, task_id, trating) %>%
      split(list(.[["list_id"]], .[["phase_id"]]))

    ## make interest rating data
    irate <- dat[dat[["repetition"]] == "repeated",
		 c("subj_id", "list_id", "stim_id", "trating")]
    irate[["task"]] <- sprintf("IN%03d", irate[["stim_id"]])

    ilists <-
      split(irate[, c("subj_id", "task", "trating")],
	    list(irate[["list_id"]])) %>%
      purrr::map(~ tidyr::pivot_wider(.x,
				      names_from = "task",
				      values_from = "trating"))

    invisible(purrr::map2_chr(df1, names(df1), make_prolific_file,
			      pids, ilists, path))
  }
#+end_src

